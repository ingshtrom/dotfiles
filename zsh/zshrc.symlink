#!/opt/homebrew/bin/zsh
#PS4='+ $(date "+%s.%N")\011 '
#exec 3>&2 2>/tmp/bashstart.$$.log
#set -x

#zmodload zsh/zprof


setopt NO_BG_NICE # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS # allow functions to have local options
setopt LOCAL_TRAPS # allow functions to have local traps
setopt HIST_VERIFY
setopt SHARE_HISTORY # share history between sessions ???
setopt EXTENDED_HISTORY # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD
setopt IGNORE_EOF

setopt APPEND_HISTORY # adds history
setopt INC_APPEND_HISTORY SHARE_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record dupes in history
setopt HIST_REDUCE_BLANKS

unsetopt complete_aliases

export AWS_REGION=us-east-1
export AWS_DEFAULT_REGION=us-east-1
export PROJECTS="$HOME/src"
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=blue,bold'
export HYPHEN_INSENSITIVE="false"
export UPDATE_ZSH_DAYS=1
export ENABLE_CORRECTION="false" # do not autocomplete without me being prompted
export COMPLETION_WAITING_DOTS="true"
export ZSH=$HOME/.oh-my-zsh
export DOTFILES=$HOME/.dotfiles
export TERM="screen-256color"
export GOPATH=$PROJECTS/go
export PATH="$DOTFILES/bin:/opt/homebrew/bin:/opt/homebrew/opt/gnu-sed/libexec/gnubin:/usr/local/go/bin:${GOPATH}/bin:${HOME}/.bin:$HOME/.arkade/bin:$HOME/.linkerd2/bin:./bin:/usr/local/bin:/usr/local/sbin:$HOME/.cargo/bin:$HOME/src/dockops/shell:$PATH"
export MANPATH="/usr/local/man:/usr/local/mysql/man:/usr/local/git/man:$MANPATH"
export EDITOR='nvim'
export VISUAL='nvim'
export CLICOLOR=true
export HISTSIZE=100000
export SAVEHIST=100000
export HISTFILE=~/.zsh_history  # ensure history file visibility
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob '"'"'!.git/*'"'"' --glob '"'"'!**/.terraform/*'"'"' --glob '"'"'!node_modules/*'"'"' --glob '"'"'!vendor/*'"'"''
export PAGER="less --RAW-CONTROL-CHARS"
export LESS="-F -X $LESS" # make sure not to page if less than a page
export BAT_PAGER="$PAGER"
export AWS_PAGER=""
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1
export CHAMBER_SECRET_BACKEND=ssm
export CHAMBER_KMS_KEY_ALIAS=aws/ssm
export TFENV_ARCH=arm64
# export AWS_PROFILE=DockerIncInfraMain-710015040892-DockerMain
# LIGHT_THEME
#export BAT_THEME=OneHalfLight
# DARK_THEME
export BAT_THEME=Dracula
# these are needed for the Clangd LSP server, I think ðŸ¤·
export LDFLAGS="-L/usr/local/opt/llvm/lib"
export CPPFLAGS="-I/usr/local/opt/llvm/include"
export DISABLE_AUTO_TITLE="true" # don't have the cmd output twice in zsh
export HOMEBREW_NO_INSTALL_CLEANUP=1
export SHELL=/opt/homebrew/bin/zsh


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

fpath=( $fpath /opt/homebrew/share/zsh-completions $DOTFILES/functions )

source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

source "$ZSH/oh-my-zsh.sh"

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -f ~/.localrc ]]
then
 source ~/.localrc
fi

################################################################################################
# ALIASES

alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'
alias h='hstr'
alias ls='exa'
alias ll='exa -alh'
alias s='function(){rg -p $@}'

# The rest of my fun git aliases
alias gl="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cd)%Creset' --abbrev-commit"
alias gd='git diff'
alias gc='git checkout'
alias gb='gh branch'
alias gcom='git commit -s'
# alias gps='docker run --rm --name=gitleaks -v $(git rev-parse --show-toplevel):/tmp zricethezav/gitleaks -v --repo-path=/tmp && git push'
alias gs='git status'
alias ga='git add --all'
#alias gl='docker run --rm --name=gitleaks -v $(git rev-parse --show-toplevel):/tmp zricethezav/gitleaks -v --repo-path=/tmp'
alias gg='cd $(git rev-parse --show-toplevel || echo ".")'
alias gup='git ups'
alias gu='git up'
alias gp='git push'
alias gcpr='function(){gh pr create $@ && gh pr view --json url | jq -r ".url" | pbcopy && echo "Pull Request URL copied to clipboard!" && gh pr view -w}'

alias cls="clear && printf '\e[3J'" # clear screen AND history. BOOM!

alias cur='aws iam list-account-aliases | jq ".AccountAliases[0]"'
#alias ad='aws-okta exec dockerinc.main -- docker run --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN --env AWS_SECURITY_TOKEN --rm -it amazon/aws-cli' # aws in docker
#alias a='awsd'
alias a='export AWS_PROFILE=$(aws configure list-profiles | fzf)'
alias ae='aws-sso exec -p $(aws configure list-profiles | fzf)'


# START `infra-cli aliases`
# alias k="kubectl"
alias d="docker"
# alias kn="kubens"
alias a='export AWS_PROFILE=$(aws configure list-profiles | fzf)'
alias ar='infra-cli aws init -y'
alias al='infra-cli aws login -y'
alias ac='eval $(aws configure export-credentials --format env)'
alias aws-sso-init='infra-cli aws init'
alias aws-sso-login='infra-cli aws login'
alias aws-sso-temp-creds='aws configure export-credentials --format env'
alias eks='infra-cli aws configEks'
# END 

alias tf=terraform

alias python='python3'

# Pipe my public key to my clipboard.
alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard.'"
alias saa="ssh-add $HOME/.ssh/dckr-default && ssh-add $HOME/.ssh/dckr-infra && ssh-add $HOME/.ssh/dckr-swarm && ssh-add $HOME/.ssh/dckr-nautilus"
alias ssh-add-pub-key='function(){ set -e; chmod 400 $1; ssh-add $1; }'

alias aws_admin_user='unset_aws && eval "$(cat ~/.localrc | grep AWS | grep export | sed '"'"'s/^#//g'"'"')"'

alias k="kubectl.docker"
alias kc="kubectx"
#alias kn="kubens"
alias kn='function(){kubectl config set-context --current --namespace="$1"}'
alias kt="kubetail"

#alias sslyze="docker run --rm -it nablac0d3/sslyze"

alias dir_diff="diff -r -x .git -x .terraform -N"

alias yk_code="ykman oath code $1"
alias yk_code_search="ykman oath code | grep -i '$@'"

alias veracrypt="/Applications/VeraCrypt.app/Contents/MacOS/VeraCrypt --text"


# colors
alias print_colors='for i in {0..255}; do print -Pn "%K{$i} %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+\\n}; done'

# alias aol='aws-okta login'
# alias aold='aws-okta login dockerinc.main'
# alias aoe='function(){aws-okta exec "$1" "${@:2}"}'
# alias ao='aws-okta'
# alias aod='aws-okta dockerinc.main'
# alias aox='function(){eval $(aws-okta env "$@" | sed "s/^/export /")}'
# alias aoxd='function(){eval $(aws-okta env dockerinc.main | sed "s/^/export /")}'
# alias am='aoxd'
# alias aa='infra-cli admin && source /tmp/adminAws && rm /tmp/adminAws && export AWS_OKTA_SESSION_EXPIRATION=$(date -v+15M +%s) && export AWS_OKTA_PROFILE=dockerinc.ADMIN'
# alias verify_am="$DOTFILES/raycast-scripts/aws-okta-login.sh"

alias lpass_search='lpass ls | grep -i "$@"'

alias ecr_login='aws ecr get-login-password --region us-east-1 | docker login 710015040892.dkr.ecr.us-east-1.amazonaws.com --username AWS --password-stdin'
alias regctl_ecr_login='regctl registry login 710015040892.dkr.ecr.us-east-1.amazonaws.com -u AWS -p $(aws ecr get-authorization-token | jq -r '"'"'.authorizationData[0].authorizationToken'"'"' | base64 --decode | cut -d: -f2)'
alias regctl_get_tags='function(){regctl tag ls 710015040892.dkr.ecr.us-east-1.amazonaws.com/infra/$1 | grep release | sort}'

alias gpg_list_encrypted_with='gpg --batch --list-packets $1 2>&1'

alias whats-my-ip='dig TXT +short o-o.myaddr.l.google.com @ns1.google.com -4 | awk -F'"'"'"'"'"' '"'"'{ print $2}'"'"' && dig TXT +short o-o.myaddr.l.google.com @ns1.google.com -6 | awk -F'"'"'"'"'"' '"'"'{ print $2}'"'"''
alias ip='whats-my-ip'
alias ipinfo='function(){curl "http://api.ipstack.com/${1}?access_key=${IPSTACK_API_ACCESS_CODE}" | jq .}'
alias i="infra-cli"

alias p='function(){infra-cli params $@}'
alias pc='function(){infra-cli params $@ | grep val | cut -d'=' -f2 | tr -d '"'"'[:space:]'"'"' | pbcopy}'

autoload -U $DOTFILES/functions/*(:t)
autoload -Uz compinit
if [ "$(date +'%j')" != "$(stat -f '%Sm' -t '%j' ~/.zcompdump)" ]; then
  compinit
else
  compinit -C
fi

# ~/.kube/config is the source of truth, but we don't want to write to it
KUBECONFIG=$HOME/.kube/config
tmpdir=$(mktemp -d)
new_kubeconfig="${tmpdir}/kubeconfig"
cp $KUBECONFIG $new_kubeconfig
export KUBECONFIG=$new_kubeconfig

# HSTR configuration - add this to ~/.zshrc
setopt histignorespace           # skip cmds w/ leading space from history
export HSTR_CONFIG=hicolor,raw-history-view
bindkey -s "\C-r" "\C-a hstr -- \C-j"     # bind hstr to Ctrl-r (for Vi mode check doc)

# GPG agent
export GPG_TTY=$(tty)
if ! (ps x | grep 'gpg-agent --daemon' 2>&1 > /dev/null)
then
  gpg-agent --daemon
fi

# nvm startup
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# Zoxide startup
eval "$(zoxide init zsh)"
alias cd=z # try out using z without changing my muscle memory
alias ci=zi # try out using z without changing my muscle memory
alias c=z # try out using z without changing my muscle memory

# McFly startup
#export MCFLY_LIGHT=false
#export MCFLY_FUZZY=true
#export MCFLY_KEY_SCHEME=vim
#export MCFLY_RESULTS=20
#export MCFLY_INTERFACE_VIEW=BOTTOM
#export MCFLY_RESULTS_SORT=RANK
#eval "$(mcfly init zsh)"

# Created by `pipx` on 2021-09-29 13:15:02
export PATH="$PATH:/Users/alexhokanson/.local/bin"

# ZPLUG stuff
export ZPLUG_HOME=/opt/homebrew/opt/zplug
source $ZPLUG_HOME/init.zsh

#zplug "dracula/zsh", as:theme
if ! which zplug 2>&1 > /dev/null; then
    echo "zplug not found, please install it"
elif ! zplug check --verbose; then
    printf "Install plugins? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi
zplug load

############################################################
## STARSHIP PROMPT INIT
############################################################
export STARSHIP_CONFIG=$HOME/.starship.toml
eval "$(starship init zsh)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/alexhokanson/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/alexhokanson/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/alexhokanson/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/alexhokanson/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

source /Users/alexhokanson/.config/broot/launcher/bash/br
