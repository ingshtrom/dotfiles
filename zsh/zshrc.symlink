# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
 source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export DOTFILES=$HOME/.dotfiles

if [[ "$(uname)" == "Linux" ]]
then
  export TERM="tmux-256color"
else
  export TERM="screen-256color"
fi

export PROJECTS="$HOME/src"
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=blue,bold'
export ZSH_THEME="powerlevel10k/powerlevel10k"
export HYPHEN_INSENSITIVE="false"
export UPDATE_ZSH_DAYS=1
export ENABLE_CORRECTION="false" # do not autocomplete without me being prompted
export COMPLETION_WAITING_DOTS="true"

plugins=(zsh-autosuggestions zsh-syntax-highlighting)

source "$ZSH/oh-my-zsh.sh"

autoload -Uz compinit
compinit

# only for Docker work
source "$PROJECTS/tools/user/ahokanson/bash-functions.sh";
source "$PROJECTS/tools/user/ahokanson/bash-functions-personal.sh"
source "$PROJECTS/tools/user/ahokanson/aliases.sh";
#source "$HOME/.local/share/lscolors.sh"
source "$(brew --prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme"

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
 source ~/.localrc
fi

if [[ "$(uname)" == "Linux" ]]
then
  export PATH="/home/linuxbrew/.linuxbrew/sbin:$PATH"
  export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
fi

for file in $(find $DOTFILES -iname "aliases.zsh"); do
 source "$file"
done

for file in $(find $DOTFILES -iname "path.zsh"); do
 source "$file"
done

for file in $(find $DOTFILES -iname "config.zsh"); do
 source "$file"
done

for file in $(find $DOTFILES -iname "setup.zsh"); do
 source "$file"
done

autoload -U +X bashcompinit && bashcompinit

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

KUBECONFIG=${KUBECONFIG:-$HOME/.kube/config}
tmpdir=$(mktemp -d)
new_kubeconfig="${tmpdir}/kubeconfig"
cp $KUBECONFIG $new_kubeconfig
export KUBECONFIG=$new_kubeconfig

# python pyenv needs to be as close to last as possible
export PYENV_ROOT="$HOME/.dotfiles/python/pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
eval "$(direnv hook $SHELL)"

## get gpg-agent working correctly
GPG_AGENT_FILE="$HOME/.gpg-agent-info"
function start_gpg_agent {
  gpg-agent --daemon --write-env-file $GPG_AGENT_FILE
}
if which gpg-agent > /dev/null; then
  # start agent if there's no agent file
  if [ ! -f $GPG_AGENT_FILE ]; then
    eval $( start_gpg_agent )
  else
    # check agent works
    source $GPG_AGENT_FILE
    SOCKET=$(echo "${GPG_AGENT_INFO}"  | cut -d : -f 1)
    # check agent connection
    if ( ! nc -U $SOCKET < /dev/null | grep -q "OK Pleased to meet you" ); then
      eval $( start_gpg_agent )
    fi
  fi
  export GPG_TTY=$(tty)
fi

