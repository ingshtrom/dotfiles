#!/usr/bin/env bash
#
# Usage: git-ups
#
# Like git fetch && git merge but show a short and sexy log of changes
# immediately after merging (git-ups)
#
# Inspired by Kyle Neath's `git up' alias:
# http://gist.github.com/249223

#set -x

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`

# make sure there are no changes to the current branch before attempting to switch
if ! ( git diff --exit-code > /dev/null 2>&1 && git diff --cached --exit-code > /dev/null 2>&1 )
then
  git status
  echo
  echo -n $yellow
  echo '-------------------------------------------------------------------------------------'
  echo -n $red
  echo "ðŸ”¥ Cannot sync the main/master branch when there are changes in the current branch"
  echo -n $green
  echo 'ðŸ¤” You could always create a new worktree if you need to work on something and leave this code as-is'
  exit 1
fi

MAIN_BRANCH='unknown'

# if we are not on main/master, then switch to it
# we already know we do not have changes in our current branch
if git branch | grep 'main' 2>&1 > /dev/null; then
  MAIN_BRANCH='main'
elif git branch | grep 'master' 2>&1 > /dev/null; then
  MAIN_BRANCH='master'
fi

if [[ "$MAIN_BRANCH" == "unknown" ]]; then
  echo "main or master not found in branch listing"
  exit 1
fi

COMMIT=$(git log -1 --oneline | sed 's/\n//g' | cut -d' ' -f1)

git fetch upstream --tags --quiet

git checkout "$MAIN_BRANCH" --quiet
git reset --hard "upstream/${MAIN_BRANCH}" --quiet

# make sure our forked main/master is up to date with the latest changes too
git push --force origin "$MAIN_BRANCH" --quiet

git --no-pager log --color --oneline "${COMMIT}..upstream/${MAIN_BRANCH}" --oneline

